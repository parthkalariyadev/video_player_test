// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v2.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
package io.flutter.plugins.videoplayer

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

/** Generated class from Pigeon.  */
object Messages {
    private fun wrapError(exception: Throwable): Map<String, Any> {
        val errorMap: MutableMap<String, Any> = HashMap()
        errorMap["message"] = exception.toString()
        errorMap["code"] = exception.javaClass.simpleName
        errorMap["details"] =
            "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(
                exception
            )
        return errorMap
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class TextureMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @NonNull
        private var textureId: Long? = null
        @NonNull
        fun getTextureId(): Long? {
            return textureId
        }

        fun setTextureId(@NonNull setterArg: Long?) {
            checkNotNull(setterArg) { "Nonnull field \"textureId\" is null." }
            textureId = setterArg
        }

        class Builder {
            @Nullable
            private var textureId: Long? = null
            @NonNull
            fun setTextureId(@NonNull setterArg: Long?): Builder {
                textureId = setterArg
                return this
            }

            @NonNull
            fun build(): TextureMessage {
                val pigeonReturn = TextureMessage()
                pigeonReturn.setTextureId(textureId)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["textureId"] = textureId
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): TextureMessage {
                val pigeonResult = TextureMessage()
                val textureId = map["textureId"]
                pigeonResult.setTextureId(
                    if (textureId == null) null else if (textureId is Int) textureId else textureId as Long?
                )
                return pigeonResult
            }
        }
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class LoopingMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @NonNull
        private var textureId: Long? = null
        @NonNull
        fun getTextureId(): Long? {
            return textureId
        }

        fun setTextureId(@NonNull setterArg: Long?) {
            checkNotNull(setterArg) { "Nonnull field \"textureId\" is null." }
            textureId = setterArg
        }

        @NonNull
        private var isLooping: Boolean? = null
        @NonNull
        fun getIsLooping(): Boolean? {
            return isLooping
        }

        fun setIsLooping(@NonNull setterArg: Boolean?) {
            checkNotNull(setterArg) { "Nonnull field \"isLooping\" is null." }
            isLooping = setterArg
        }

        class Builder {
            @Nullable
            private var textureId: Long? = null
            @NonNull
            fun setTextureId(@NonNull setterArg: Long?): Builder {
                textureId = setterArg
                return this
            }

            @Nullable
            private var isLooping: Boolean? = null
            @NonNull
            fun setIsLooping(@NonNull setterArg: Boolean?): Builder {
                isLooping = setterArg
                return this
            }

            @NonNull
            fun build(): LoopingMessage {
                val pigeonReturn = LoopingMessage()
                pigeonReturn.setTextureId(textureId)
                pigeonReturn.setIsLooping(isLooping)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["textureId"] = textureId
            toMapResult["isLooping"] = isLooping
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): LoopingMessage {
                val pigeonResult = LoopingMessage()
                val textureId = map["textureId"]
                pigeonResult.setTextureId(
                    if (textureId == null) null else if (textureId is Int) textureId else textureId as Long?
                )
                val isLooping = map["isLooping"]
                pigeonResult.setIsLooping(isLooping as Boolean?)
                return pigeonResult
            }
        }
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class VolumeMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @NonNull
        private var textureId: Long? = null
        @NonNull
        fun getTextureId(): Long? {
            return textureId
        }

        fun setTextureId(@NonNull setterArg: Long?) {
            checkNotNull(setterArg) { "Nonnull field \"textureId\" is null." }
            textureId = setterArg
        }

        @NonNull
        private var volume: Double? = null
        @NonNull
        fun getVolume(): Double? {
            return volume
        }

        fun setVolume(@NonNull setterArg: Double?) {
            checkNotNull(setterArg) { "Nonnull field \"volume\" is null." }
            volume = setterArg
        }

        class Builder {
            @Nullable
            private var textureId: Long? = null
            @NonNull
            fun setTextureId(@NonNull setterArg: Long?): Builder {
                textureId = setterArg
                return this
            }

            @Nullable
            private var volume: Double? = null
            @NonNull
            fun setVolume(@NonNull setterArg: Double?): Builder {
                volume = setterArg
                return this
            }

            @NonNull
            fun build(): VolumeMessage {
                val pigeonReturn = VolumeMessage()
                pigeonReturn.setTextureId(textureId)
                pigeonReturn.setVolume(volume)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["textureId"] = textureId
            toMapResult["volume"] = volume
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): VolumeMessage {
                val pigeonResult = VolumeMessage()
                val textureId = map["textureId"]
                pigeonResult.setTextureId(
                    if (textureId == null) null else if (textureId is Int) textureId else textureId as Long?
                )
                val volume = map["volume"]
                pigeonResult.setVolume(volume as Double?)
                return pigeonResult
            }
        }
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class PlaybackSpeedMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @NonNull
        private var textureId: Long? = null
        @NonNull
        fun getTextureId(): Long? {
            return textureId
        }

        fun setTextureId(@NonNull setterArg: Long?) {
            checkNotNull(setterArg) { "Nonnull field \"textureId\" is null." }
            textureId = setterArg
        }

        @NonNull
        private var speed: Double? = null
        @NonNull
        fun getSpeed(): Double? {
            return speed
        }

        fun setSpeed(@NonNull setterArg: Double?) {
            checkNotNull(setterArg) { "Nonnull field \"speed\" is null." }
            speed = setterArg
        }

        class Builder {
            @Nullable
            private var textureId: Long? = null
            @NonNull
            fun setTextureId(@NonNull setterArg: Long?): Builder {
                textureId = setterArg
                return this
            }

            @Nullable
            private var speed: Double? = null
            @NonNull
            fun setSpeed(@NonNull setterArg: Double?): Builder {
                speed = setterArg
                return this
            }

            @NonNull
            fun build(): PlaybackSpeedMessage {
                val pigeonReturn = PlaybackSpeedMessage()
                pigeonReturn.setTextureId(textureId)
                pigeonReturn.setSpeed(speed)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["textureId"] = textureId
            toMapResult["speed"] = speed
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): PlaybackSpeedMessage {
                val pigeonResult = PlaybackSpeedMessage()
                val textureId = map["textureId"]
                pigeonResult.setTextureId(
                    if (textureId == null) null else if (textureId is Int) textureId else textureId as Long?
                )
                val speed = map["speed"]
                pigeonResult.setSpeed(speed as Double?)
                return pigeonResult
            }
        }
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class PositionMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @NonNull
        private var textureId: Long? = null
        @NonNull
        fun getTextureId(): Long? {
            return textureId
        }

        fun setTextureId(@NonNull setterArg: Long?) {
            checkNotNull(setterArg) { "Nonnull field \"textureId\" is null." }
            textureId = setterArg
        }

        @NonNull
        private var position: Long? = null
        @NonNull
        fun getPosition(): Long? {
            return position
        }

        fun setPosition(@NonNull setterArg: Long?) {
            checkNotNull(setterArg) { "Nonnull field \"position\" is null." }
            position = setterArg
        }

        class Builder {
            @Nullable
            private var textureId: Long? = null
            @NonNull
            fun setTextureId(@NonNull setterArg: Long?): Builder {
                textureId = setterArg
                return this
            }

            @Nullable
            private var position: Long? = null
            @NonNull
            fun setPosition(@NonNull setterArg: Long?): Builder {
                position = setterArg
                return this
            }

            @NonNull
            fun build(): PositionMessage {
                val pigeonReturn = PositionMessage()
                pigeonReturn.setTextureId(textureId)
                pigeonReturn.setPosition(position)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["textureId"] = textureId
            toMapResult["position"] = position
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): PositionMessage {
                val pigeonResult = PositionMessage()
                val textureId = map["textureId"]
                pigeonResult.setTextureId(
                    if (textureId == null) null else if (textureId is Int) textureId else textureId as Long?
                )
                val position = map["position"]
                pigeonResult.setPosition(
                    if (position == null) null else if (position is Int) position else position as Long?
                )
                return pigeonResult
            }
        }
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class CreateMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @get:Nullable
        @Nullable
        var asset: String? = null

        @get:Nullable
        @Nullable
        var uri: String? = null

        @get:Nullable
        @Nullable
        var drmUrl: String? = null

        @get:Nullable
        @Nullable
        var drmType: String? = null

        @get:Nullable
        @Nullable
        var packageName: String? = null

        @get:Nullable
        @Nullable
        var formatHint: String? = null

        @NonNull
        private var httpHeaders: Map<String, String>? = null
        @NonNull
        fun getHttpHeaders(): Map<String, String>? {
            return httpHeaders
        }

        fun setHttpHeaders(@NonNull setterArg: Map<String, String>?) {
            checkNotNull(setterArg) { "Nonnull field \"httpHeaders\" is null." }
            httpHeaders = setterArg
        }

        class Builder {
            @Nullable
            private var asset: String? = null
            @NonNull
            fun setAsset(@Nullable setterArg: String?): Builder {
                asset = setterArg
                return this
            }

            @Nullable
            private var uri: String? = null
            @NonNull
            fun setUri(@Nullable setterArg: String?): Builder {
                uri = setterArg
                return this
            }

            @Nullable
            private var drmUrl: String? = null
            @NonNull
            fun setDrmUrl(@Nullable setterArg: String?): Builder {
                drmUrl = setterArg
                return this
            }

            @Nullable
            private var drmType: String? = null
            @NonNull
            fun setDrmType(@Nullable setterArg: String?): Builder {
                drmType = setterArg
                return this
            }

            @Nullable
            private var packageName: String? = null
            @NonNull
            fun setPackageName(@Nullable setterArg: String?): Builder {
                packageName = setterArg
                return this
            }

            @Nullable
            private var formatHint: String? = null
            @NonNull
            fun setFormatHint(@Nullable setterArg: String?): Builder {
                formatHint = setterArg
                return this
            }

            @Nullable
            private var httpHeaders: Map<String, String>? = null
            @NonNull
            fun setHttpHeaders(@NonNull setterArg: Map<String, String>?): Builder {
                httpHeaders = setterArg
                return this
            }

            @NonNull
            fun build(): CreateMessage {
                val pigeonReturn = CreateMessage()
                pigeonReturn.asset = asset
                pigeonReturn.uri = uri
                pigeonReturn.drmUrl = drmUrl
                pigeonReturn.drmType = drmType
                pigeonReturn.packageName = packageName
                pigeonReturn.formatHint = formatHint
                pigeonReturn.setHttpHeaders(httpHeaders)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["asset"] = asset
            toMapResult["uri"] = uri
            toMapResult["drmUrl"] = drmUrl
            toMapResult["drmType"] = drmType
            toMapResult["packageName"] = packageName
            toMapResult["formatHint"] = formatHint
            toMapResult["httpHeaders"] = httpHeaders
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): CreateMessage {
                val pigeonResult = CreateMessage()
                val asset = map["asset"]
                pigeonResult.asset = asset as String?
                val uri = map["uri"]
                pigeonResult.uri = uri as String?
                val drmUrl = map["drmUrl"]
                pigeonResult.drmUrl = drmUrl as String?
                val drmType = map["drmType"]
                pigeonResult.drmType = drmType as String?
                val packageName = map["packageName"]
                pigeonResult.packageName = packageName as String?
                val formatHint = map["formatHint"]
                pigeonResult.formatHint = formatHint as String?
                val httpHeaders = map["httpHeaders"]
                pigeonResult.setHttpHeaders(httpHeaders as Map<String, String>?)
                return pigeonResult
            }
        }
    }

    /** Generated class from Pigeon that represents data sent in messages.  */
    class MixWithOthersMessage
    /** Constructor is private to enforce null safety; use Builder.  */
    private constructor() {
        @NonNull
        private var mixWithOthers: Boolean? = null
        @NonNull
        fun getMixWithOthers(): Boolean? {
            return mixWithOthers
        }

        fun setMixWithOthers(@NonNull setterArg: Boolean?) {
            checkNotNull(setterArg) { "Nonnull field \"mixWithOthers\" is null." }
            mixWithOthers = setterArg
        }

        class Builder {
            @Nullable
            private var mixWithOthers: Boolean? = null
            @NonNull
            fun setMixWithOthers(@NonNull setterArg: Boolean?): Builder {
                mixWithOthers = setterArg
                return this
            }

            @NonNull
            fun build(): MixWithOthersMessage {
                val pigeonReturn = MixWithOthersMessage()
                pigeonReturn.setMixWithOthers(mixWithOthers)
                return pigeonReturn
            }
        }

        @NonNull
        fun toMap(): Map<String, Any?> {
            val toMapResult: MutableMap<String, Any?> = HashMap()
            toMapResult["mixWithOthers"] = mixWithOthers
            return toMapResult
        }

        companion object {
            @NonNull
            fun fromMap(@NonNull map: Map<String?, Any?>): MixWithOthersMessage {
                val pigeonResult = MixWithOthersMessage()
                val mixWithOthers = map["mixWithOthers"]
                pigeonResult.setMixWithOthers(mixWithOthers as Boolean?)
                return pigeonResult
            }
        }
    }

    private class AndroidVideoPlayerApiCodec private constructor() : StandardMessageCodec() {
        protected fun readValueOfType(type: Byte, buffer: ByteBuffer?): Any {
            return when (type) {
                128.toByte() -> CreateMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                129.toByte() -> LoopingMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                130.toByte() -> MixWithOthersMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                131.toByte() -> PlaybackSpeedMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                132.toByte() -> PositionMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                133.toByte() -> TextureMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                134.toByte() -> VolumeMessage.fromMap(readValue(buffer) as Map<String?, Any?>)
                else -> super.readValueOfType(type, buffer)
            }
        }

        protected fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
            if (value is CreateMessage) {
                stream.write(128)
                writeValue(stream, value.toMap())
            } else if (value is LoopingMessage) {
                stream.write(129)
                writeValue(stream, value.toMap())
            } else if (value is MixWithOthersMessage) {
                stream.write(130)
                writeValue(stream, value.toMap())
            } else if (value is PlaybackSpeedMessage) {
                stream.write(131)
                writeValue(stream, value.toMap())
            } else if (value is PositionMessage) {
                stream.write(132)
                writeValue(stream, value.toMap())
            } else if (value is TextureMessage) {
                stream.write(133)
                writeValue(stream, value.toMap())
            } else if (value is VolumeMessage) {
                stream.write(134)
                writeValue(stream, value.toMap())
            } else {
                super.writeValue(stream, value)
            }
        }

        companion object {
            val INSTANCE = AndroidVideoPlayerApiCodec()
        }
    }

    /** Generated interface from Pigeon that represents a handler of messages from Flutter.  */
    interface AndroidVideoPlayerApi {
        fun initialize()

        @NonNull
        fun create(@NonNull msg: CreateMessage?): TextureMessage
        fun dispose(@NonNull msg: TextureMessage?)
        fun setLooping(@NonNull msg: LoopingMessage?)
        fun setVolume(@NonNull msg: VolumeMessage?)
        fun setPlaybackSpeed(@NonNull msg: PlaybackSpeedMessage?)
        fun play(@NonNull msg: TextureMessage?)

        @NonNull
        fun position(@NonNull msg: TextureMessage?): PositionMessage
        fun seekTo(@NonNull msg: PositionMessage?)
        fun pause(@NonNull msg: TextureMessage?)
        fun setMixWithOthers(@NonNull msg: MixWithOthersMessage?)

        companion object {
            /** The codec used by AndroidVideoPlayerApi.  */
            val codec: MessageCodec<Any?>?
                get() = AndroidVideoPlayerApiCodec.INSTANCE

            /**
             * Sets up an instance of `AndroidVideoPlayerApi` to handle messages through the
             * `binaryMessenger`.
             */
            @JvmStatic
            fun setup(binaryMessenger: BinaryMessenger?, api: AndroidVideoPlayerApi?) {
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger,
                        "dev.flutter.pigeon.AndroidVideoPlayerApi.initialize",
                        codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                api.initialize()
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.create", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as CreateMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                val output = api.create(msgArg)
                                wrapped["result"] = output
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.dispose", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as TextureMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.dispose(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger,
                        "dev.flutter.pigeon.AndroidVideoPlayerApi.setLooping",
                        codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as LoopingMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.setLooping(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.setVolume", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as VolumeMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.setVolume(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger,
                        "dev.flutter.pigeon.AndroidVideoPlayerApi.setPlaybackSpeed",
                        codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as PlaybackSpeedMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.setPlaybackSpeed(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.play", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as TextureMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.play(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.position", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as TextureMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                val output = api.position(msgArg)
                                wrapped["result"] = output
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.seekTo", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as PositionMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.seekTo(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger, "dev.flutter.pigeon.AndroidVideoPlayerApi.pause", codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as TextureMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.pause(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
                run {
                    val channel: BasicMessageChannel<Any> = BasicMessageChannel(
                        binaryMessenger,
                        "dev.flutter.pigeon.AndroidVideoPlayerApi.setMixWithOthers",
                        codec
                    )
                    if (api != null) {
                        channel.setMessageHandler { message, reply ->
                            val wrapped: MutableMap<String, Any?> = HashMap()
                            try {
                                val args = message as ArrayList<Any>
                                val msgArg = args[0] as MixWithOthersMessage
                                    ?: throw NullPointerException("msgArg unexpectedly null.")
                                api.setMixWithOthers(msgArg)
                                wrapped["result"] = null
                            } catch (exception: Error) {
                                wrapped["error"] = wrapError(exception)
                            } catch (exception: RuntimeException) {
                                wrapped["error"] = wrapError(exception)
                            }
                            reply.reply(wrapped)
                        }
                    } else {
                        channel.setMessageHandler(null)
                    }
                }
            }
        }
    }
}